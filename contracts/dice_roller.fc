#include "imports/stdlib.fc";
const op::deposit = "op::deposit"c; 
const op::withdraw = "op::withdraw"c; 
global int ctx_balance;
 
()load_data() impure {
    var ds = get_data().begin_parse();
    ctx_balance = ds~load_uint(32);
    ds.end_parse();
   
}
()save_data() impure {
    set_data(
        begin_cell().store_uint(ctx_balance,32).end_cell()
    );
}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if( in_msg_body.slice_empty?()){
        return();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::deposit){
        int increase_by = in_msg_body~load_uint(32);
        ctx_balance += increase_by;
        save_data();
        return();
    }
    if(op == op::withdraw){
        int decrease_by = in_msg_body~load_uint(32);
        ctx_balance -= decrease_by;
        save_data();
        return();
    }

    throw(0xffff);
}

int get_balance_number() method_id {
    load_data();
    return ctx_balance;
}

